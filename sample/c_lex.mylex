%{
#include <stdlib.h>
int i = 0;
%}
%%
\s|\t|\r {
  strcpy(shm_token->type, "SKIP");
}
\n {
  strcpy(shm_token->type, "SKIP");
  i++;
}
if|else|while|do|break|switch|for|case|struct|typedef {
  strcpy(shm_token->type,"KEYWORD");
}
int|float|double|long|char {
  strcpy(shm_token->type, "TYPE");
}
(un)?signed {
  strcpy(shm_token->type, "TYPE_MODIFIER");
}
#(include|define|undef|ifdef|ifndef|if|endif|elif|else) {
  strcpy(shm_token->type,"PREPROC_DERIV");
}
[a-zA-Z_][a-z0-9A-Z_]* {
  strcpy(shm_token->type, "IDENTIFIER");
}
[1-9][0-9]*|[0-9] {
  strcpy(shm_token->type, "INTEGER");
}
\+|\-|\*|/|% {
  strcpy(shm_token->type, "ARITHMETIC_OP");
}
==|&&|(\|\|)|!|<|>|<=|>= {
  strcpy(shm_token->type, "LOGICAL_OP");
}
^|&|~|\| {
  strcpy(shm_token->type, "BIT_OP");
}
\-> {
  strcpy(shm_token->type, "ACCESS_OP");
}
= {
  strcpy(shm_token->type, "ASSIGN_OP");
}
; {
  strcpy(shm_token->type, "SEMICOLON");
}
\. {
  strcpy(shm_token->type, "DOT");
}
, {
  strcpy(shm_token->type, "COMMA");
}
\[ {
  strcpy(shm_token->type, "LEFT_SQBRAC");
}
\] {
  strcpy(shm_token->type, "RIGHT_SQBRAC");
}
\( {
  strcpy(shm_token->type, "LEFT_PAREN");
}
\) {
  strcpy(shm_token->type, "RIGHT_PAREN");
}
} {
  strcpy(shm_token->type, "BLOCK_END");
}
{ {
  strcpy(shm_token->type, "BLOCK_START");
}
%%

int main (int argc, char ** argv) {
  FILE* infile;
  infile = fopen(argv[1], "r");
  shm_parse(infile);
  fclose(infile);
  Token* now = token_list.next;
  while (now->next != 0) {
    printf("('%s', '%s')\n", now->type, now->value);
    now = now->next;
  }
  printf("count line: %d\n", i++);
  FREE_TOKENS();
}
