{"body":"TINY-LEX(MyLex)\r\n========\r\n\r\nOverview\r\n--------\r\n\r\nMyLex is a tiny lexical analyzer implemented in C++ and it is my home work of\r\ncompiler.\r\n\r\nSTEPS\r\n-----\r\n1. parse .mylex file\r\n2. generate a list of NFA by the regex strings\r\n3. generate a large NFA by combining the NFAs\r\n4. convert the NFA to a DFA\r\n5. minimize the DFA\r\n6. generate the c code from DFA\r\n\r\nSome Important Algorithms\r\n-------------------------\r\n1. convert regex to postfix expression\r\n2. convert postfix expression to NFA, [reference](http://swtch.com/~rsc/regexp/regexp1.html)\r\n3. convert NFA to DFA\r\n4. minimize DFA\r\n\r\nCompile And Run\r\n---------------\r\n\r\n### Environment for MyLex\r\n\r\n1. OS: Linux , Unix or Mac OS\r\n2. Compiler: g++ or clang\r\n3. Library: [Boost](http://www.boost.org/)\r\n\r\n### Environment for c code generated by MyLex\r\n\r\n1. OS: Linux , Unix or Mac OS\r\n2. Compiler: gcc or clang, *Must Use Compilers Which Support C99*\r\n\r\n### Compiler MyLex\r\n\r\n```\r\nFor Debug\r\n  make DEBUG=1\r\n\r\nNot For Debug\r\n  make\r\n```\r\n\r\n### How to use\r\n\r\n```\r\nmylex infile [outfile](default output to stdout)\r\n```\r\n\r\n### Sample\r\n```\r\nmake\r\n./mylex sample/c_lex.mylex > c_lex.c\r\nmake c_lex\r\n```\r\n\r\nMyLex Syntax\r\n------------\r\n\r\n* Sample: [c_lex.mylex](https://github.com/sheimi/tiny-lex/blob/master/sample/c_lex.mylex)\r\n* Sample Input: [sample.c](https://github.com/sheimi/tiny-lex/blob/master/sample/sample.c)\r\n* Sample Output: [sample.out](https://github.com/sheimi/tiny-lex/blob/master/sample/sample.out)\r\n\r\nFile Format\r\n```\r\n[N] the number of entries\r\n[Entry]\r\n[Entry]\r\n...\r\n```\r\n\r\nEntry Format\r\n\r\n```\r\n[Regex]\r\n[Handler] with the param (shm_str)\r\n========= (at least 4 '=')\r\n```\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"My Tiny Lexical Analyzer","name":"Tiny Lex (MyLex)","google":"UA-35791128-1"}